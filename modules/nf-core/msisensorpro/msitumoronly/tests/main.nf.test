nextflow_process {

    name "Test Process MSISENSORPRO_MSITUMORONLY"
    script "../main.nf"
    process "MSISENSORPRO_MSITUMORONLY"

    tag "modules"
    tag "modules_nfcore"
    tag "msisensorpro"
    tag "msisensorpro/msitumoronly"
    tag "msisensorpro/scan"

    setup {
        run("MSISENSORPRO_SCAN") {
            script "../../scan/main.nf"
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                // file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
                        file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
                    ]
                """
            }
        }
    }

    test("human - cram") {

        when {
            process {
                """
                input[0] = [// meta map
                        [ id:'test'],
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_cram'], checkIfExists: true),
                        // file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_cram_crai'], checkIfExists: true),
                        //  file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
                        []
                    ]
                input[1] = [ [ id:'reference' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
                    ]
                input[2] = MSISENSORPRO_SCAN.out.list
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("human - cram - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [// meta map
                        [ id:'test'],
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_cram'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_cram_crai'], checkIfExists: true),
                        []
                    ]
                input[1] = [ [ id:'reference' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
                    ]
                input[2] = MSISENSORPRO_SCAN.out.list
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
