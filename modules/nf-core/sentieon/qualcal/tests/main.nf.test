nextflow_process {
    name "Test Process SENTIEON_QUALCAL"
    script "../main.nf"
    process "SENTIEON_QUALCAL"

    tag "modules"
    tag "modules_nfcore"
    tag "sentieon"
    tag "sentieon/qualcal"

    test("sarscov2 - fasta, deduped bam") {

        setup {
            run("SENTIEON_DEDUP") {
                script "../../dedup/main.nf"
                process {
                    """
                    input[0] =  Channel.fromList([
                        tuple([ id:'test_bam' ],
                            file(params.test_data['sarscov2']['illumina']['test_single_end_sorted_bam'], checkIfExists: true)),
                        tuple([ id:'test_bai' ],
                            file(params.test_data['sarscov2']['illumina']['test_single_end_sorted_bam_bai'], checkIfExists: true))

                    ])
                    input[1] =  Channel.fromList([
                        tuple([ id:'test_fasta' ],
                            file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true))
                    ])
                    input[2] =  Channel.fromList([
                        tuple([ id:'test_fai' ],
                            file(params.test_data['sarscov2']['genome']['genome_fasta_fai'], checkIfExists: true))
                    ])
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] =  Channel.fromList([
                    tuple([ id:'test_deduped_bam' ], SENTIEON_DEDUP.out.bam),
                    tuple([ id:'test_deduped_bai' ], SENTIEON_DEDUP.out.bai)

                ])
                input[1] =  Channel.fromList([
                    tuple([ id:'test_fasta' ],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)),
                    tuple([ id:'test_fai' ],
                        file(params.test_data['sarscov2']['genome']['genome_fasta_fai'], checkIfExists: true))
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

//     test("sarscov2 - deduped bam - stub") {

//         options "-stub"

//         when {
//             process {
//                 """
//                 // TODO nf-core: define inputs of the process here. Example:

//                 input[0] = [
//                     [ id:'test', single_end:false ], // meta map
//                     file(params.test_data['sarscov2']['illumina']['test_paired_end_bam'], checkIfExists: true)
//                     ]
//                 """
//             }
//         }

//         then {
//             assertAll(
//                 { assert process.success },
//                 { assert snapshot(process.out).match() }
//                 //TODO nf-core: Add all required assertions to verify the test output.
//             )
//         }

//     }

}

// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test sentieon/qualcal