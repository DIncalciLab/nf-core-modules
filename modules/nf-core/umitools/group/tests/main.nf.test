nextflow_process {

    name "Test Process UMITOOLS_GROUP"
    script "../main.nf"
    process "UMITOOLS_GROUP"

    tag "modules"
    tag "modules_nfcore"
    tag "umitools"
    tag "umitools/group"

    setup {
        run("UMITOOLS_EXTRACT") {
            script "../../extract/main.nf"
            config "./nextflow.config"
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                """
            }
        }

        run("BWA_INDEX") {
            script "../../../bwa/index/main.nf"
            process {
                """
                input[0] = [
                 [ id:'sarscov2'],
                 file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
             ]
                """
            }
        }

        run("BWA_MEM") {
            script "../../../bwa/mem/main.nf"
            process {
                """
                input[0] = UMITOOLS_EXTRACT.out.reads
                input[1] = BWA_INDEX.out.index
                input[2] = [ [], [] ]
                input[3] = true
                """
            }
        }

        run("SAMTOOLS_INDEX") {
            script "../../../samtools/index/main.nf"
            process {
                """
                input[0] = BWA_MEM.out.bam
                """
            }
        }

    }

    test("no_umi") {

        when {
            process {
                """
                input[0] = [[ id:'test'], // meta map
                    file(params.test_data_base + '/data/genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.test_data_base + '/data/genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ]
                input[1] = true
                input[2] = true
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.bam,
                    process.out.tsv,
                    file(process.out.log[0][1]).readLines()[0..1],
                    process.out.versions
                    ).match() }
            )
        }

    }

    test("with_umi - bam") {

        when {
            process {
                """
                input[0] = BWA_MEM.out.bam.join(SAMTOOLS_INDEX.out.bai, by: [0])
                input[1] = true
                input[2] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.bam,
                    file(process.out.log[0][1]).readLines()[0..1],
                    process.out.versions
                    ).match() }
            )
        }

    }

    test("with_umi - tsv") {

        when {
            process {
                """
                input[0] = BWA_MEM.out.bam.join(SAMTOOLS_INDEX.out.bai, by: [0])
                input[1] = true
                input[2] = true
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.tsv,
                    file(process.out.log[0][1]).readLines()[0..1],
                    process.out.versions
                    ).match() }
            )
        }

    }

    test("with_umi - stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = BWA_MEM.out.bam.join(SAMTOOLS_INDEX.out.bai, by: [0])
                input[1] = true
                input[2] = true
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
